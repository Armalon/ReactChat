{"version":3,"sources":["components/Chat/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Search","Input","Chat","props","Form","useForm","form","title","serialNumber","itemLayout","dataSource","chatMessages","renderItem","item","Item","Meta","href","userName","text","name","placeholder","onSearch","val","entered","resetFields","enterButton","Header","Layout","Footer","Content","App","observer","state","newMessageAddedHandler","value","chatNumber","push","Chats","Array","apply","map","v","k","chatMessagesAll","key","direction","style","width","this","React","Component","observable","computed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXAKQA,EAAWC,IAAXD,OA4COE,EA/BF,SAACC,GAAkB,IAAD,EACZC,IAAKC,UAAbC,EADoB,oBAG3B,OACI,kBAAC,IAAD,CAAMC,MAAK,gBAAWJ,EAAMK,eACxB,kBAAC,IAAD,CACIC,WAAW,aACXC,WAAYP,EAAMQ,aAClBC,WAAY,SAAAC,GAAI,OACZ,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAKA,KAAKC,KAAX,CACIR,MAAO,uBAAGS,KAAK,sBAAsBH,EAAKI,YAE7CJ,EAAKK,SAKlB,kBAAC,IAAD,CACIZ,KAAMA,GACN,kBAAC,IAAKQ,KAAN,CAAWK,KAAK,WACZ,kBAACnB,EAAD,CACIoB,YAAY,sBACZC,SAAU,SAACC,GAAUnB,EAAMoB,QAAQD,EAAKnB,EAAMK,cAAeF,EAAKkB,eAClEC,YAAY,a,mCC7B5BC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QA4ETC,EAvEdC,a,8MAIGC,MAAQ,G,iDAwBRC,uBAAyB,SAACC,EAAeC,GACrC,EAAKxB,aAAayB,KAAK,CACnBnB,SAAS,SAAD,OAAWkB,GACnBjB,KAAMgB,K,uDAaJ,IAAD,OACCG,EAAQC,MAAMC,MAAM,KAAMD,MA/Cf,IA+CwCE,KAAI,SAACC,EAAGC,GAC7D,OAAO,kBAAC,EAAD,CACHnB,QAAS,EAAKU,uBACdtB,aAAc,EAAKgC,gBACnBnC,aAAckC,EAAI,EAClBE,IAAKF,OAIb,OACI,kBAAC,IAAD,KACI,kBAAChB,EAAD,CAAQnB,MAAM,sBAEd,kBAACsB,EAAD,KACI,kBAAC,IAAD,CAAOgB,UAAU,WAAWC,MAAO,CAACC,MAAO,SACtCV,IAGT,kBAACT,EAAD,uB,sCAtCR,OAAO,YAAIoB,KAAKrC,kB,GAxBNsC,IAAMC,W,0CAOnBC,K,wEACkC,CAC/B,CACIlC,SAAU,UACVC,KAAM,gBAEV,CACID,SAAU,UACVC,KAAM,mBAEV,CACID,SAAU,UACVC,KAAM,oB,2CAIbkC,K,qFC9BeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAGFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efce9134.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Card, List, Input, Form } from 'antd'\n// import {SearchProps} from \"antd/es/input/Search\";\n\nconst { Search } = Input;\n\nexport interface ChatMessage {\n    userName: string\n    text: string\n}\n\nexport interface Props {\n    serialNumber: number\n    chatMessages: Array<ChatMessage>,\n    entered: (value: string, chatNumber: number) => void\n}\n\nconst Chat = (props: Props) => {\n    const [form] = Form.useForm();\n\n    return (\n        <Card title={`Chat #${props.serialNumber}`}>\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={props.chatMessages}\n                renderItem={item => (\n                    <List.Item>\n                        <List.Item.Meta\n                            title={<a href=\"https://ant.design\">{item.userName}</a>}\n                        />\n                        {item.text}\n                    </List.Item>\n                )}\n            />\n\n            <Form\n                form={form}>\n                <Form.Item name=\"message\">\n                    <Search\n                        placeholder=\"Type a message here\"\n                        onSearch={(val) => { props.entered(val, props.serialNumber); form.resetFields() }}\n                        enterButton=\"Send\" />\n                </Form.Item>\n            </Form>\n        </Card>\n    )\n};\n\nexport default Chat","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css'\n\nimport Chat, { ChatMessage } from \"./components/Chat/Chat\";\n// import { SearchProps } from \"antd/es/input/Search\";\n\nimport { Space } from 'antd'\nimport { Layout } from 'antd';\n\nimport { observer } from \"mobx-react\"\nimport { observable, computed } from 'mobx'\n\nconst { Header, Footer, Content } = Layout;\n\n// todo: move to the config\nconst chatWindowsCount = 4\n\n@observer\nclass App extends React.Component {\n    // todo: put in a MobX state\n    // and make it reactive\n    state = {\n        //  Array <ChatMessage> =\n    }\n\n    @observable\n    chatMessages: Array<ChatMessage> = [\n        {\n            userName: 'user #1',\n            text: 'Init message'\n        },\n        {\n            userName: 'user #3',\n            text: 'Another message'\n        },\n        {\n            userName: 'user #4',\n            text: 'Last message'\n        },\n    ]\n\n    @computed get chatMessagesAll():Array<ChatMessage> {\n        return [...this.chatMessages]\n    }\n\n    newMessageAddedHandler = (value: string, chatNumber: number) => {\n        this.chatMessages.push({\n            userName: `user #${chatNumber}`,\n            text: value\n        })\n\n        // const chatMessages = [...this.state.chatMessages]\n        // chatMessages.push({\n        //     userName: `user #${chatNumber}`,\n        //     text: value\n        // })\n        // this.setState({\n        //     chatMessages\n        // })\n    }\n\n    render() {\n        const Chats = Array.apply(null, Array(chatWindowsCount)).map((v, k) => {\n            return <Chat\n                entered={this.newMessageAddedHandler}\n                chatMessages={this.chatMessagesAll}\n                serialNumber={k + 1}\n                key={k}\n            />\n        })\n\n        return (\n            <Layout>\n                <Header title='Welcome to chats!'>\n                </Header>\n                <Content>\n                    <Space direction=\"vertical\" style={{width: '100%'}}>\n                        {Chats}\n                    </Space>\n                </Content>\n                <Footer>\n                    Footer here\n                </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}