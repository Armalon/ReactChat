{"version":3,"sources":["components/Chat/Chat.tsx","App.tsx","storage.ts","index.tsx"],"names":["Search","Input","Chat","props","Form","useForm","form","title","serialNumber","itemLayout","dataSource","chatMessages","renderItem","item","Item","Meta","href","userName","text","name","placeholder","onSearch","val","entered","resetFields","enterButton","Header","Layout","Footer","Content","App","observer","this","Chats","Array","apply","map","v","k","newMessageAddedHandler","chatMessagesAll","key","direction","style","width","React","Component","observableChatMessages","value","chatNumber","push","observable","computed","ReactDOM","render","document","getElementById"],"mappings":"2SAIQA,EAAWC,IAAXD,OA4COE,EA/BF,SAACC,GAAkB,IAAD,EACZC,IAAKC,UAAbC,EADoB,oBAG3B,OACI,kBAAC,IAAD,CAAMC,MAAK,gBAAWJ,EAAMK,eACxB,kBAAC,IAAD,CACIC,WAAW,aACXC,WAAYP,EAAMQ,aAClBC,WAAY,SAAAC,GAAI,OACZ,kBAAC,IAAKC,KAAN,KACI,kBAAC,IAAKA,KAAKC,KAAX,CACIR,MAAO,uBAAGS,KAAK,sBAAsBH,EAAKI,YAE7CJ,EAAKK,SAKlB,kBAAC,IAAD,CACIZ,KAAMA,GACN,kBAAC,IAAKQ,KAAN,CAAWK,KAAK,WACZ,kBAACnB,EAAD,CACIoB,YAAY,sBACZC,SAAU,SAACC,GAAUnB,EAAMoB,QAAQD,EAAKnB,EAAMK,cAAeF,EAAKkB,eAClEC,YAAY,aC3B5BC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,OAAQC,EAAYF,IAAZE,QAmCTC,EAhCdC,Y,yKAGO,IAAMpB,EAAuCqB,KAAK7B,MAAMQ,aAElDsB,EAAQC,MAAMC,MAAM,KAAMD,MAPf,IAOwCE,KAAI,SAACC,EAAGC,GAC7D,OAAO,kBAAC,EAAD,CACHf,QAASZ,EAAa4B,uBACtB5B,aAAcA,EAAa6B,gBAC3BhC,aAAc8B,EAAI,EAClBG,IAAKH,OAIb,OACI,kBAAC,IAAD,KACI,kBAACZ,EAAD,0BAGA,kBAACG,EAAD,KACI,kBAAC,IAAD,CAAOa,UAAU,WAAWC,MAAO,CAACC,MAAO,SACtCX,IAGT,kBAACL,EAAD,yB,GAvBEiB,IAAMC,a,6CCiBTC,EAFgB,IA7B/B,sGAqBIR,uBAAyB,SAACS,EAAeC,GACrC,EAAKtC,aAAauC,KAAK,CACnBjC,SAAS,SAAD,OAAWgC,GACnB/B,KAAM8B,KAxBlB,4DAkBQ,OAAO,YAAIhB,KAAKrB,kBAlBxB,+CACKwC,KADL,wEAEuC,CAC/B,CACIlC,SAAU,UACVC,KAAM,gBAEV,CACID,SAAU,UACVC,KAAM,mBAEV,CACID,SAAU,UACVC,KAAM,oBAblB,2CAiBKkC,KAjBL,+ECEAC,IAASC,OAEL,kBAAC,EAAD,CAAK3C,aAAcoC,IAGrBQ,SAASC,eAAe,W","file":"static/js/main.3ed4be2c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, List, Input, Form } from 'antd'\n\n\nconst { Search } = Input;\n\nexport interface ChatMessage {\n    userName: string\n    text: string\n}\n\nexport interface Props {\n    serialNumber: number\n    chatMessages: Array<ChatMessage>,\n    entered: (value: string, chatNumber: number) => void\n}\n\nconst Chat = (props: Props) => {\n    const [form] = Form.useForm();\n\n    return (\n        <Card title={`Chat #${props.serialNumber}`}>\n            <List\n                itemLayout=\"horizontal\"\n                dataSource={props.chatMessages}\n                renderItem={item => (\n                    <List.Item>\n                        <List.Item.Meta\n                            title={<a href=\"https://ant.design\">{item.userName}</a>}\n                        />\n                        {item.text}\n                    </List.Item>\n                )}\n            />\n\n            <Form\n                form={form}>\n                <Form.Item name=\"message\">\n                    <Search\n                        placeholder=\"Type a message here\"\n                        onSearch={(val) => { props.entered(val, props.serialNumber); form.resetFields() }}\n                        enterButton=\"Send\" />\n                </Form.Item>\n            </Form>\n        </Card>\n    )\n};\n\nexport default Chat","import React from 'react';\n\nimport { Space, Layout } from 'antd'\nimport 'antd/dist/antd.css'\n\nimport { observer } from \"mobx-react\"\n\nimport Chat from \"./components/Chat/Chat\";\nimport { ObservableChatMessages } from './storage'\n\ninterface Props {\n    chatMessages: ObservableChatMessages\n}\n\nconst { Header, Footer, Content } = Layout;\nconst chatWindowsCount = 4\n\n@observer\nclass App extends React.Component<Props, object> {\n    render() {\n        const chatMessages: ObservableChatMessages = this.props.chatMessages\n\n        const Chats = Array.apply(null, Array(chatWindowsCount)).map((v, k) => {\n            return <Chat\n                entered={chatMessages.newMessageAddedHandler}\n                chatMessages={chatMessages.chatMessagesAll}\n                serialNumber={k + 1}\n                key={k}\n            />\n        })\n\n        return (\n            <Layout>\n                <Header>\n                    Welcome to chats!\n                </Header>\n                <Content>\n                    <Space direction=\"vertical\" style={{width: '100%'}}>\n                        {Chats}\n                    </Space>\n                </Content>\n                <Footer>\n                    Footer here\n                </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import {computed, observable} from \"mobx\";\nimport { ChatMessage } from \"./components/Chat/Chat\";\n\n\nexport class ObservableChatMessages {\n    @observable\n    chatMessages: Array<ChatMessage> = [\n        {\n            userName: 'user #1',\n            text: 'Init message'\n        },\n        {\n            userName: 'user #3',\n            text: 'Another message'\n        },\n        {\n            userName: 'user #4',\n            text: 'Last message'\n        },\n    ]\n\n    @computed get chatMessagesAll():Array<ChatMessage> {\n        return [...this.chatMessages]\n    }\n\n    newMessageAddedHandler = (value: string, chatNumber: number) => {\n        this.chatMessages.push({\n            userName: `user #${chatNumber}`,\n            text: value\n        })\n    }\n}\n\nconst observableChatMessages = new ObservableChatMessages()\n\nexport default observableChatMessages","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport observableChatMessages from './storage'\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App chatMessages={observableChatMessages}/>\n  // </React.StrictMode>\n  ,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}